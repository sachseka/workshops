---
title: "eatPrep"
subtitle: "IQB-internes R-Paket zur Aufbereitung von \"Papier\"-Kompetenzdaten"
author: "Karoline Sachse"
date: "2024-11-19"
title-slide-attributes:
  data-background-image: eatPrep.png
  data-background-size: 15%
  data-background-repeat: no-repeat
  data-background-position: 95% 5%
bibliography: alle.bib
csl: apa.csl
format: 
  revealjs:
    logo: eatPrep.png
    toc: false
    theme: default
    css: styles.css
    slide-number: true
    show-slide-number: all        
editor: source
execute:
  echo: true
---

```{r, include = FALSE}
library(knitr)
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
```

## Agenda {.smaller}

1.  Das Paket eatPrep

    a)  Fokus
    b)  Features
    c)  Installation

2.  Datenstrukturen

    a.  ...von "Papier-Kompetenzdaten" am IQB

    b.  Repräsentation dieser Strukturen in eatPrep

3.  Praktisch angewendet

    a)  Haupt-Funktionen und -Schritte der Papier-Kompetenzdatenaufbereitung
    b)  Meta-Daten aus der Datenbank (IQB-ItemDB) holen
    c)  Rater-Funktionen und der KA3-Datensatz
    d)  weitere Funktionen

4.  Übung

5.  Ausblick

# 1. Fokus, Features und Installation

## Was ist "Papier-Kompetenzdatenaufbereitung"? {.smaller}

**Papier-Tests**

Schülerinnen und Schüler...

-   erhalten gedruckte Testbögen,
-   füllen diese aus und
-   werden dabei von speziell geschulten Testleiter:innen beaufsichtigt.

Die Ergebnisse werden später zentral gesammelt.

::: footer
1a. eatPrep: Fokus
:::

## Was ist "Papier-Kompetenzdatenaufbereitung"? {.smaller}

**Aufbereitung der Kompetenzdaten**

Die ausgefüllten Bögen werden

-   **eingescannt** (idR durch Datenpartner)
-   bei Multiple-Choice-Fragen oder Ankreuzaufgaben wird häufig ein optisches Scannersystem verwendet, das die markierten **automatisch** Felder erkennt und direkt in eine digitale Datenbank überträgt (idR durch Datenpartner)
-   (teil-) offene Antworten werden durch geschulte **Kodierer:innen** bewertet (teils am Haus, teils durch Datenpartner)

Ansatzpunkt für **eatPrep**: Standardisierung und Automatisierung des Umgangs mit solchen Daten, die vom Subkontraktor zumeist im SPSS- (.sav) Format übergeben werden.

::: footer
1a. eatPrep: Fokus
:::

## Primäres Ziel von eatPrep {.smaller}

-   Aufbereitung von Kompetenztestdaten für IRT-Analysen unter Verwendung von Meta-Informationen (z.B. aus der IQB-ItemDB)
-   Optimiert für die Aufbereitung von IQB-Kompetenzdaten, aber nicht nur für diese verwendbar

::: footer
1a. eatPrep: Fokus
:::

## Features

-   **Automatisierung** der Aufbereitungs-Arbeitsschritte
-   Vielfältige **Prüfungen**, Plausibilitätschecks und Diagnostik
-   Behandlung vieler verschiedener **Missingtypen**, wenn gewünscht Beibehaltung bis zum Schluss (inkl. Missing-not-reached-Berechnung)
-   Weitere **Tools** (Kategorientrennschärfen, Raterfunktionen, teil-manuelles Datencleaning, Exportfunktionen…)

::: footer
1b. eatPrep: Features
:::

## Installation

-   eatPrep liegt auf der Entwicklerplattform GitHub
-   R-Pakete kann man von GitHub z.B. über das R-Paket "remotes" installieren. Sofern es nicht vorhanden ist, kann es mit...

```{r remotes}
# install.packages("remotes")

```

...installiert werden. eatPrep kann anschließend mit folgender Befehlszeile installiert werden:

```{r eatprep}
# remotes::install_github("sachseka/eatPrep")
library(eatPrep)
```

::: footer
1c. eatPrep: Installation
:::

# 2. Daten-Strukturen von Kompetenzdaten am IQB

## Subitems, Items, Aufgaben {.smaller}

![](pics/cyclehire4.jpg){fig-width="60%" fig-align="center"}

::: footer
2a. Strukturen von Papier-Kompetenzdaten am IQB
:::

## Subitems, Items, Aufgaben und Values und Scores {.smaller}

![](pics/cyclehire1.jpg){fig-width="60%" fig-align="center"}

::: footer
2a. Subitems in Items in Aufgaben
:::

## Fehlende Werte {.smaller}

```{r missing types, echo=FALSE}
mir98 <- c(-98, "mir", "missing invalid response",
           "(1) Item was edited, and (2a) empty answer or (2b) invalid (joke) answer.")
mbo99 <- c(-99, "mbo/mbi", "missing by omission/intention",
           "Item wasn't edited but seen, or wasn't seen, but there are seen or edited subsequent Items.")
mnr96 <- c(-96, "mnr", "missing not reached",
           "(1) Item wasn't seen, and (2) all subsequent Items weren't seen, either.")
mci97 <- c(-97, "mci", "missing coding impossible",
           "(1) Item should/could have been edited, and (2) answer can't be analysed due to technical problems.")
mbd94 <- c(-94, "mbd", "missing by design",
           "no answer, because Item wasn't shown to the testperson by design.")
Mtypes <- rbind.data.frame(mir98, mbo99, mnr96, mci97, mbd94)
names(Mtypes) <- c("Code", "Abbr", "Label", "Explanation")

kable(Mtypes)
```

::: footer
2a. Subitems in Items in Aufgaben
:::

## Subitems, Items, Aufgaben, Blöcke und Testhefte {.smaller}

::: {style="margin-top: -30px;"}
![](pics/structure.jpg){fig-width="60%" fig-align="center"}
:::

::: footer
2a. Strukturen von Papier-Kompetenzdaten am IQB
:::

## Aufgaben in Blöcken und Blöcke in Testheften {.smaller}

<img src="pics/ainb.jpg"/> <img src="pics/bint.jpg"/>

::: footer
2a. Strukturen von Papier-Kompetenzdaten am IQB
:::

## Subitems, Items, Aufgaben, Blöcke und Testhefte {.smaller}

-   Testhefte (booklets): bestehen aus Blöcken

-   Blöcke (blocks/cluster): bestehen aus Aufgaben

-   Aufgaben (tasks): beinhalten Items (i.d.R. zu einem gemeinsamen Stimulus/Testlet)

-   **Item**s (units): (meist) die am Ende interessierende Analyseeinheit

-   Subitems (subunits): werden zu Items aggregiert

-   Werte (values): Ausprägungen, die eine Person auf einem (Sub-)Item annehmen kann

-   Scores (valueRecodes): Eine Abbildung der ursprünglichen Werte (Values) auf eine kleinere Anzahl von Kategorien (i.d.R. mindestens Richtig/Falsch/Fehlend, also 1/0/NA), die besser für eine IRT-Skalierung geeignet sind

::: footer
2a. Strukturen von Papier-Kompetenzdaten am IQB
:::

## Repräsentation der Datenstrukturen in eatPrep {.smaller}

-   eine Liste aus mehreren data.frames mit prädefinierter Struktur und festen Namen

-   analog einfacher relationaler Meta-Daten-Datenbank

::: footer
2b. Metadaten-Struktur in eatPrep
:::

## Repräsentation der Datenstrukturen in eatPrep: inputListen-Plätze 1-4 {.smaller}

::: {style="margin-top: -10px; text-align: center;"}
![](pics/inputList3.jpg){fig-width="85%"}
:::

## Repräsentation der Datenstrukturen in eatPrep: inputListen-Plätze 5-7 {.smaller}

::: {style="margin-top: 50px; text-align: center;"}
![](pics/il567.jpg){fig-align="center" width="500"}
:::

::: footer
2b. Metadaten-Struktur in eatPrep
:::

## Repräsentation der Datenstrukturen in eatPrep: inputListen-Plätze 8-10 {.smaller}

::: {style="margin-top: 20px; text-align: center;"}
![](pics/il8910.jpg){fig-align="center" width="800"}
:::

::: footer
2b. Metadaten-Struktur in eatPrep
:::

# Funktionen in eatPrep

## (Meta-)Daten einlesen

[`readDaemonXlsx()`](https://sachseka.github.io/eatPrep/reference/readDaemonXlsx.html) - Einlesen der inputListe, die mithilfe des EDV-Tools "ZKDaemon" erzeugt wurde.
::: {.small-text-compact}
(Dieses liegt unter "i:\\EDV\\IQB-Apps\\ZKDaemon\\ZKDaemon.application". Eine ausführlichere, via Screenshots geführte Anleitung zur Bedienung des ZKDaemon findet sich hier: i:\\Methoden\\02_IQB-interne_eat_Workshops\\eatPrep_2021\\eatPrep_2021-06-18.pdf)
:::




readDaemonXlsx readMerkmalXlsx readSpss

::: footer
3a. Praxis: Haupt-Funktionen in eatPrep
:::
